@page "/"
@using Azure;
@using Azure.AI.Vision.Common;
@using Azure.AI.Vision.ImageAnalysis;
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Computer Vision</h1>

<p>Insert URL or type prompt.</p>

<textarea @bind="urlOrPrompt" rows="1" cols="50"
    placeholder="Enter URL to analyze or prompt text to generate image"></textarea>
<button @onclick="AnalyzeImage">Analyze Image</button>
<button @onclick="GenerateImage">Generate Image</button>
<img src="@urlOrPrompt" alt="Image to analyze" />
<p>@caption</p>

@code {
    string urlOrPrompt = "";
    string caption = "";

    void AnalyzeImage()
    {
        var serviceOptions = new VisionServiceOptions(
        Environment.GetEnvironmentVariable("VISION_ENDPOINT"),
        new AzureKeyCredential(Environment.GetEnvironmentVariable("VISION_KEY")));

        using var imageSource = VisionSource.FromUrl(
        new Uri(urlOrPrompt));

        var analysisOptions = new ImageAnalysisOptions()
            {
                Features = ImageAnalysisFeature.Caption | ImageAnalysisFeature.Text,

                Language = "en",

                GenderNeutralCaption = true
            };

        using var analyzer = new ImageAnalyzer(serviceOptions, imageSource, analysisOptions);

        var result = analyzer.Analyze();

        if (result.Reason == ImageAnalysisResultReason.Analyzed)
        {
            if (result.Caption != null)
            {
                Console.WriteLine(" Caption:");
                Console.WriteLine($" \"{result.Caption.Content}\", Confidence {result.Caption.Confidence:0.0000}");
                caption = result.Caption.Content;
            }

            if (result.Text != null)
            {
                Console.WriteLine($" Text:");
                foreach (var line in result.Text.Lines)
                {
                    string pointsToString = "{" + string.Join(',', line.BoundingPolygon.Select(pointsToString => pointsToString.ToString()))
                    + "}";
                    Console.WriteLine($" Line: '{line.Content}', Bounding polygon {pointsToString}");

                    foreach (var word in line.Words)
                    {
                        pointsToString = "{" + string.Join(',', word.BoundingPolygon.Select(pointsToString => pointsToString.ToString())) + "}";
                        Console.WriteLine($" Word: '{word.Content}', Bounding polygon {pointsToString}, Confidence {word.Confidence:0.0000}");
                    }
                }
            }
        }
        else
        {
            var errorDetails = ImageAnalysisErrorDetails.FromResult(result);
            Console.WriteLine(" Analysis failed.");
            Console.WriteLine($" Error reason : {errorDetails.Reason}");
            Console.WriteLine($" Error code : {errorDetails.ErrorCode}");
            Console.WriteLine($" Error message: {errorDetails.Message}");
        }
    }

    void GenerateImage()
    {

    }
}